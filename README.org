#+TITLE: How to maintain a second brain with Org mode
#+AUTHOR: John Herrlin
#+DATE: <2022-11-17 Thu>


* Org mode

  "Org mode is for keeping notes, maintaining to-do lists, planning projects,
  authoring documents, computational notebooks, literate programming and more —
  in a fast and effective plain text system." https://orgmode.org/

  A little bit like markdowns older brother but with interactive superpowers
  that got a shot of Excel and hit by Jupyter notebook.

  Important part is that it's plain text, no strange format or database holds
  your info. It will stand the test of time.

* Text

  *Bold*

  /italic/

  =verbatime=

  +strikethrough+

* Headings
** Sub heading
*** Sub sub heading

    Some text down here

*** Sub sub heading 2

    Some text down here to

*** Sub sub heading 3

    Some text down here to, again

* Links
  <<anchor>>

  A link to a web page [[https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks2/][Org mode blog post]]

  A link to a file on the local file system: [[/Users/john.herrlin/git/org-files/talks/code.kt::4][callHttpEndpoint]]

  A link to a mail [[mu4e:msgid:010001847ffebc32-20e8a5b8-a102-4cd1-adf6-63b0636f2c91-000000@email.amazonses.com][Choose the Best Books of the Year]]

  A link to an [[anchor]]

* Lists

  - [2/3] Important things to do today!
    - [ ] Check [[https://www.idg.se/][news]]
    - [X] There is a strange bug [[/Users/john.herrlin/git/org-files/talks/code.kt::4][callHttpEndpoint]] when user X do Y
    - [X] Answer this email [[mu4e:msgid:010001847ffebc32-20e8a5b8-a102-4cd1-adf6-63b0636f2c91-000000@email.amazonses.com][Choose the Best Books of the Year]]

* Code
** Bash

   #+BEGIN_SRC shell :results output code
     ls -la /tmp/
   #+END_SRC

** Python

   #+BEGIN_SRC python :results output code
     for i in range(3):
       print(i, "Hey Kodkollektivet!")
   #+END_SRC

   #+RESULTS:
   #+begin_src python
   0 Hey Kodkollektivet!
   1 Hey Kodkollektivet!
   2 Hey Kodkollektivet!
   #+end_src

** Kotlin

   #+BEGIN_SRC kotlin :results output code
     println(
         listOf<Int>(1, 2, 3).map { it + 1 }
     )
     println(
         listOf<Int>().map { it + 1 }
     )
   #+END_SRC

   #+RESULTS:
   #+begin_src kotlin
   [2, 3, 4]
   []
   #+end_src

** AWK

   #+NAME: text-example
   #+BEGIN_EXAMPLE
     Item1 100
     Item2 200
     Item3 50
   #+END_EXAMPLE

   Sum field nr 2.

   #+BEGIN_SRC awk :results table :stdin text-example
     BEGIN {OFS="|"}; { sum+= $2}; END { print "Sum", sum}
   #+END_SRC

   #+RESULTS:
   | Sum | 350 |

* Tables
** Plain table

   | Name    | Age | Barks? |
   |---------+-----+--------|
   | Hannah  |  35 | No     |
   | Charlie |  13 | Yes    |
   | Ebbe    |   1 | No     |
   | John    |  36 | No     |

** Excel features

   | Description | Amounts | Cost | Total |
   |-------------+---------+------+-------|
   | Item 1      |       5 |   10 |    50 |
   | Item 2      |       1 |   55 |    55 |
   | Item 3      |      20 |   10 |   200 |
   | Item 4      |    1000 |    1 |  1000 |
   |-------------+---------+------+-------|
   | Sum:        |         |      |  1305 |
   #+TBLFM: $4=$2*$3::@>$4=vsum(@<<$4..@>>$4)

** Table as input to code

   #+NAME: countries
   | Country name | Area | Population | Region        |
   |--------------+------+------------+---------------|
   | USSR         | 8649 |        275 | Asia          |
   | Brazil       | 3286 |        134 | South America |
   | India        | 1267 |        746 | Asia          |
   | Mexico       |  762 |         78 | North America |
   | France       |  211 |         55 | Europe        |
   | Japan        |  144 |        120 | Asia          |
   | Germany      |   96 |         61 | Europe        |
   | England      |   94 |         56 | Europe        |

   #+BEGIN_SRC awk :stdin countries
     /Europe/ { sum+= $3 }
     END { print "Sum of the population in Europe is", sum}
   #+END_SRC

   #+RESULTS:
   : Sum of the population in Europe is 172

* Track time with logbook
** <2022-11-17 Thu> Daily notes
   :LOGBOOK:
   CLOCK: [2022-11-17 Thu 19:36]--[2022-11-17 Thu 19:37] =>  0:01
   CLOCK: [2022-11-17 Mon 13:00]--[2022-11-17 Mon 17:11] =>  4:11
   CLOCK: [2022-11-17 Mon 08:00]--[2022-11-17 Mon 12:00] =>  4:00
   :END:

** <2022-11-16 Wed> Daily notes
   :LOGBOOK:
   CLOCK: [2022-11-16 Sun 13:00]--[2022-11-16 Sun 16:44] =>  3:44
   CLOCK: [2022-11-16 Sun 08:00]--[2022-11-16 Sun 12:00] =>  4:00
   :END:

** <2022-11-15 Tue> Daily notes
   :LOGBOOK:
   CLOCK: [2022-11-15 Sat 13:00]--[2022-11-15 Sat 17:00] =>  4:00
   CLOCK: [2022-11-15 Sat 08:00]--[2022-11-15 Sat 12:00] =>  4:00
   :END:

* Timetable

  #+BEGIN: clocktable :scope file :block thisweek :compact t
  #+CAPTION: Clock summary at [2022-11-17 Thu 19:37], for week 2022-W46.
  | Headline                         |    Time |
  |----------------------------------+---------|
  | *Total time*                     | *23:56* |
  |----------------------------------+---------|
  | Track time with logbook          |   23:56 |
  | \_  <2022-11-17 Thu> Daily notes |    8:12 |
  | \_  <2022-11-16 Wed> Daily notes |    7:44 |
  | \_  <2022-11-15 Tue> Daily notes |    8:00 |
  #+END:

* HTTP Requests

  #+BEGIN_SRC restclient :results output code
    GET https://api.github.com/orgs/kodkollektivet/repos
    User-Agent: Org mode
  #+END_SRC

* Database queries
** SQLite

   #+NAME: user-table
   | Id | Name     |
   |----+----------|
   |  1 | John     |
   |  2 | Benny    |
   |  3 | Krille P |

   #+begin_src sqlite :db /tmp/temp.db :var orgtable=user-table :colnames yes
     DROP TABLE if EXISTS user; CREATE TABLE user(id integer, name text);
     .mode csv user
     .import $orgtable user
   #+end_src

   #+NAME: address-table
   | Id | Userid | Address        |
   |----+--------+----------------|
   |  1 |      1 | Södra Åreda 55 |
   |  2 |      2 | Kalletorp 1    |
   |  3 |      4 | Någonsväg 35   |

   #+begin_src sqlite :db /tmp/temp.db :var orgtable=address-table :colnames yes :results none
     DROP TABLE if EXISTS address; CREATE TABLE address(id integer, userid integer, address integer);
     .mode csv address
     .import $orgtable address
   #+end_src

   #+BEGIN_SRC sqlite :db /tmp/temp.db :colnames yes
     SELECT * FROM user u
     LEFT JOIN address a ON u.id = a.userid
   #+END_SRC

   #+RESULTS:
   | id | name     | id | userid | address        |
   |----+----------+----+--------+----------------|
   |  1 | John     |  1 |      1 | Södra Åreda 55 |
   |  2 | Benny    |  2 |      2 | Kalletorp 1    |
   |  3 | Krille P |    |        |                |

** Postgres
   :PROPERTIES:
   :header-args:sql+: :engine postgresql
   :header-args:sql+: :dbhost localhost
   :header-args:sql+: :dbuser world
   :header-args:sql+: :dbpassword world123
   :header-args:sql+: :dbport 5432
   :header-args:sql+: :database world-db
   :header-args:sql+: :colnames yes
   :END:

   Start a Postgres database

   #+BEGIN_SRC shell :results output code
     docker run -d -p 5432:5432 ghusta/postgres-world-db:2.10
   #+END_SRC

**** List of all databases in Postgres cluster

     #+BEGIN_SRC sql
       \l+
     #+END_SRC

     #+RESULTS:
     | List of databases |         |            |                                    |            |                   |         |            |                                            |
     |-------------------+---------+------------+------------------------------------+------------+-------------------+---------+------------+--------------------------------------------|
     | Name              | Owner   | Encoding   | Collate                            | Ctype      | Access privileges | Size    | Tablespace | Description                                |
     | postgres          | world   | UTF8       | en_US.utf8                         | en_US.utf8 |                   | 7453 kB | pg_default | default administrative connection database |
     | template0         | world   | UTF8       | en_US.utf8                         | en_US.utf8 | =c/world          |         |            |                                            |
     | world=CTc/world   | 7297 kB | pg_default | unmodifiable empty database        |            |                   |         |            |                                            |
     | template1         | world   | UTF8       | en_US.utf8                         | en_US.utf8 | =c/world          |         |            |                                            |
     | world=CTc/world   | 7525 kB | pg_default | default template for new databases |            |                   |         |            |                                            |
     | world-db          | world   | UTF8       | en_US.utf8                         | en_US.utf8 |                   | 8213 kB | pg_default |                                            |

**** List tables

     #+BEGIN_SRC sql
       \d+
     #+END_SRC

     #+RESULTS:
     | List of relations |                  |       |       |             |               |        |             |
     |-------------------+------------------+-------+-------+-------------+---------------+--------+-------------|
     | Schema            | Name             | Type  | Owner | Persistence | Access method | Size   | Description |
     | public            | city             | table | world | permanent   | heap          | 296 kB |             |
     | public            | country          | table | world | permanent   | heap          | 48 kB  |             |
     | public            | country_flag     | table | world | permanent   | heap          | 24 kB  |             |
     | public            | country_language | table | world | permanent   | heap          | 56 kB  |             |

**** List schema

     #+BEGIN_SRC sql
       \d+ city
     #+END_SRC

     #+RESULTS:
     | Table "public.city"                                                                         |              |           |          |         |          |             |              |                 |
     |---------------------------------------------------------------------------------------------+--------------+-----------+----------+---------+----------+-------------+--------------+-----------------|
     | Column                                                                                      | Type         | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     |
     | id                                                                                          | integer      |           | not null |         | plain    |             |              |                 |
     | name                                                                                        | text         |           | not null |         | extended |             |              |                 |
     | country_code                                                                                | character(3) |           | not null |         | extended |             |              |                 |
     | district                                                                                    | text         |           | not null |         | extended |             |              |                 |
     | population                                                                                  | integer      |           | not null |         | plain    |             |              |                 |
     | local_name                                                                                  | text         |           |          |         | extended |             |              | City local name |
     | Indexes:                                                                                    |              |           |          |         |          |             |              |                 |
     | "city_pkey" PRIMARY KEY, btree (id)                                                         |              |           |          |         |          |             |              |                 |
     | Foreign-key constraints:                                                                    |              |           |          |         |          |             |              |                 |
     | "country_fk" FOREIGN KEY (country_code) REFERENCES country(code)                            |              |           |          |         |          |             |              |                 |
     | Referenced by:                                                                              |              |           |          |         |          |             |              |                 |
     | TABLE "country" CONSTRAINT "country_capital_fkey" FOREIGN KEY (capital) REFERENCES city(id) |              |           |          |         |          |             |              |                 |
     | Access method: heap                                                                         |              |           |          |         |          |             |              |                 |

**** Queries

     #+BEGIN_SRC sql
       SELECT * FROM city LIMIT 10
     #+END_SRC

     #+RESULTS:
     | id | name           | country_code | district      | population | local_name |
     |----+----------------+--------------+---------------+------------+------------|
     |  1 | Kabul          | AFG          | Kabol         |    1780000 |            |
     |  2 | Qandahar       | AFG          | Qandahar      |     237500 |            |
     |  3 | Herat          | AFG          | Herat         |     186800 |            |
     |  4 | Mazar-e-Sharif | AFG          | Balkh         |     127800 |            |
     |  5 | Amsterdam      | NLD          | Noord-Holland |     731200 |            |
     |  6 | Rotterdam      | NLD          | Zuid-Holland  |     593321 |            |
     |  7 | Haag           | NLD          | Zuid-Holland  |     440900 |            |
     |  8 | Utrecht        | NLD          | Utrecht       |     234323 |            |
     |  9 | Eindhoven      | NLD          | Noord-Brabant |     201843 |            |
     | 10 | Tilburg        | NLD          | Noord-Brabant |     193238 |            |
